version: '3.4'
services:
  sqlserver:
    image: ${DOCKER_REGISTRY-}mcr.microsoft.com/mssql/server:2017-latest-ubuntu 
    hostname: 'sqlserver'  
    restart: always
    container_name: 'sqlserver'
    environment:  
      ACCEPT_EULA: Y  
      SA_PASSWORD: "Password123"     
    ports:  
      - '1433:1433'
    expose:
      - 1433
    volumes:  
      - /var/container_data/mysql:/var/lib/mysql mysql_image  sni

  gateway:
    image: ${DOCKER_REGISTRY-}webapi
    hostname: "gateway"  
    restart: always
    ports:
      - "8030:80"
    build:
      context: .
      dockerfile: Api/WebApi/Dockerfile

  rabbitmq:
    image: "rabbitmq:3-management"
    hostname: "rabbit"
    restart: always
    container_name: 'RabbitMq'
    ports:
      - "15672:15672"
      - "5672:5672"
    labels:
      NAME: "rabbitmq"
    volumes:
      - ./rabbitmq-isolated.conf:/etc/rabbitmq/rabbitmq.config

  monitor:
    image: ${DOCKER_REGISTRY-}monitor
    hostname: "monitor"
    restart: always
    container_name: 'HealtMonitor'
    ports:
      - "8031:80"
    build:
      context: .
      dockerfile: Services/Monitor/Monitor/Dockerfile

  transferapi:
    image: ${DOCKER_REGISTRY-}transfer_api
    hostname: "transferapi"
    restart: always
    ports:
      - "8033:80"
    build:
      context: .
      dockerfile: Services/Transfer/Transfer_Api/Dockerfile

  eventstore:
    image: ${DOCKER_REGISTRY-}eventstore
    hostname: "eventstore"  
    restart: always
    ports:
      - "8034:80"
    build:
      context: .
      dockerfile: Services/EventStore/EventStore/Dockerfile

  kalendarapi:
    image: ${DOCKER_REGISTRY-}kalendar_api
    hostname: "kalendarapi" 
    restart: always
    ports:
      - "8035:80"
    build:
      context: .
      dockerfile: Services/Kalendar/Kalendar_Api/Dockerfile

  dochazkaapi:
    image: ${DOCKER_REGISTRY-}dochazka_api
    hostname: "dochazkaapi"
    restart: always
    ports:
      - "8037:80"
    build:
      context: .
      dockerfile: Services/Dochazka/Dochazka_Api/Dockerfile

  uzivatelapi:
    image: ${DOCKER_REGISTRY-}uzivatel_api
    hostname: "uzivatelapi" 
    restart: always
    ports:
      - "8038:80"
    build:
      context: .
      dockerfile: Services/Uzivatel/Uzivatel_Api/Dockerfile

  pritomnostapi:
    image: ${DOCKER_REGISTRY-}pritomnost_api
    hostname: "pritomnostapi" 
    restart: always
    ports:
      - "8039:80"
    build:
      context: .
      dockerfile: Services/Pritomnost/Pritomnost_Api/Dockerfile

  aktivitaapi:
    image: ${DOCKER_REGISTRY-}aktivita_api
    hostname: "aktivitaapi" 
    restart: always
    ports:
      - "8040:80"
    build:
      context: .
      dockerfile: Services/Aktivita/Aktivita_Api/Dockerfile

  cinnostapi:
    image: ${DOCKER_REGISTRY-}cinnost_api
    hostname: "cinnostapi"   
    restart: always
    ports:
      - "8041:80"
    build:
      context: .
      dockerfile: Services/Cinnost/Cinnost_Api/Dockerfile

  mailsenderapi:
    image: ${DOCKER_REGISTRY-}mailsender_api
    hostname: "mailsenderapi"
    restart: always
    ports:
      - "8042:80"
    build:
      context: .
      dockerfile: Services/MailSender/MailSender_Api/Dockerfile

  mzdyapi:
    image: ${DOCKER_REGISTRY-}mzdy_api
    hostname: "mzdyapi"  
    restart: always
    ports:
      - "8043:80"
    build:
      context: .
      dockerfile: Services/Mzdy/Mzdy_Api/Dockerfile

  nastaveniapi:
    image: ${DOCKER_REGISTRY-}nastaveni_api
    hostname: "nastaveniapi"   
    restart: always
    ports:
      - "8044:80"
    build:
      context: .
      dockerfile: Services/Nastaveni/Nastaveni_Api/Dockerfile

  opravneniapi:
    image: ${DOCKER_REGISTRY-}opravneni_api
    hostname: "popravneniapi"   
    restart: always
    ports:
      - "8045:80"
    build:
      context: .
      dockerfile: Services/Opravneni/Opravneni_Api/Dockerfile
     
  soucastapi:
    image: ${DOCKER_REGISTRY-}soucast_api
    hostname: "soucastapi"  
    restart: always
    ports:
      - "8046:80"
    build:
      context: .
      dockerfile: Services/Soucast/Soucast_Api/Dockerfile

  strukturaapi:
    image: ${DOCKER_REGISTRY-}struktura_api
    hostname: "strukturaapi" 
    restart: always
    ports:
      - "8047:80"
    build:
      context: .
      dockerfile: Services/Struktura/Struktura_Api/Dockerfile

  ukolapi:
    image: ${DOCKER_REGISTRY-}ukol_api
    hostname: "ukolapi"
    restart: always
    ports:
      - "8048:80"
    build:
      context: .
      dockerfile: Services/Ukol/Ukol_Api/Dockerfile

  vykazapi:
    image: ${DOCKER_REGISTRY-}vykaz_api
    hostname: "vykazapi"
    restart: always
    ports:
      - "8049:80"
    build:
      context: .
      dockerfile: Services/Vykaz/Vykaz_Api/Dockerfile

  kancelarweb:
    image: ${DOCKER_REGISTRY-}kancelarweb
    ports:
      - "85:80"
    build:
      context: .
      dockerfile: Gui/KancelarWeb/Dockerfile








       

